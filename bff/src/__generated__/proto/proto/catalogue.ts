// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/catalogue.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../google/protobuf/empty";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "book";

export interface GetBookRequest {
  $type: "book.GetBookRequest";
  id: number;
}

export interface GetBookResponse {
  $type: "book.GetBookResponse";
  book: Book | undefined;
}

export interface ListBooksResponse {
  $type: "book.ListBooksResponse";
  books: Book[];
}

export interface Book {
  $type: "book.Book";
  id: number;
  title: string;
  author: string;
  price: number;
}

function createBaseGetBookRequest(): GetBookRequest {
  return { $type: "book.GetBookRequest", id: 0 };
}

export const GetBookRequest: MessageFns<GetBookRequest, "book.GetBookRequest"> = {
  $type: "book.GetBookRequest" as const,

  encode(message: GetBookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookRequest {
    return { $type: GetBookRequest.$type, id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetBookRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookRequest>, I>>(base?: I): GetBookRequest {
    return GetBookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookRequest>, I>>(object: I): GetBookRequest {
    const message = createBaseGetBookRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

messageTypeRegistry.set(GetBookRequest.$type, GetBookRequest);

function createBaseGetBookResponse(): GetBookResponse {
  return { $type: "book.GetBookResponse", book: undefined };
}

export const GetBookResponse: MessageFns<GetBookResponse, "book.GetBookResponse"> = {
  $type: "book.GetBookResponse" as const,

  encode(message: GetBookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.book !== undefined) {
      Book.encode(message.book, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.book = Book.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookResponse {
    return { $type: GetBookResponse.$type, book: isSet(object.book) ? Book.fromJSON(object.book) : undefined };
  },

  toJSON(message: GetBookResponse): unknown {
    const obj: any = {};
    if (message.book !== undefined) {
      obj.book = Book.toJSON(message.book);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBookResponse>, I>>(base?: I): GetBookResponse {
    return GetBookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBookResponse>, I>>(object: I): GetBookResponse {
    const message = createBaseGetBookResponse();
    message.book = (object.book !== undefined && object.book !== null) ? Book.fromPartial(object.book) : undefined;
    return message;
  },
};

messageTypeRegistry.set(GetBookResponse.$type, GetBookResponse);

function createBaseListBooksResponse(): ListBooksResponse {
  return { $type: "book.ListBooksResponse", books: [] };
}

export const ListBooksResponse: MessageFns<ListBooksResponse, "book.ListBooksResponse"> = {
  $type: "book.ListBooksResponse" as const,

  encode(message: ListBooksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.books) {
      Book.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBooksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.books.push(Book.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBooksResponse {
    return {
      $type: ListBooksResponse.$type,
      books: globalThis.Array.isArray(object?.books) ? object.books.map((e: any) => Book.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListBooksResponse): unknown {
    const obj: any = {};
    if (message.books?.length) {
      obj.books = message.books.map((e) => Book.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBooksResponse>, I>>(base?: I): ListBooksResponse {
    return ListBooksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBooksResponse>, I>>(object: I): ListBooksResponse {
    const message = createBaseListBooksResponse();
    message.books = object.books?.map((e) => Book.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(ListBooksResponse.$type, ListBooksResponse);

function createBaseBook(): Book {
  return { $type: "book.Book", id: 0, title: "", author: "", price: 0 };
}

export const Book: MessageFns<Book, "book.Book"> = {
  $type: "book.Book" as const,

  encode(message: Book, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.author !== "") {
      writer.uint32(26).string(message.author);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Book {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Book {
    return {
      $type: Book.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: Book): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Book>, I>>(base?: I): Book {
    return Book.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Book>, I>>(object: I): Book {
    const message = createBaseBook();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.author = object.author ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Book.$type, Book);

export interface Catalogue {
  GetBook(request: GetBookRequest): Promise<GetBookResponse>;
  ListBooks(request: Empty): Promise<ListBooksResponse>;
}

export const CatalogueServiceName = "book.Catalogue";
export class CatalogueClientImpl implements Catalogue {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CatalogueServiceName;
    this.rpc = rpc;
    this.GetBook = this.GetBook.bind(this);
    this.ListBooks = this.ListBooks.bind(this);
  }
  GetBook(request: GetBookRequest): Promise<GetBookResponse> {
    const data = GetBookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBook", data);
    return promise.then((data) => GetBookResponse.decode(new BinaryReader(data)));
  }

  ListBooks(request: Empty): Promise<ListBooksResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListBooks", data);
    return promise.then((data) => ListBooksResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
