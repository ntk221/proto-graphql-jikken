// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: proto/catalogue.proto

/* eslint-disable */

import { InputObjectRef } from "@pothos/core";
import { builder } from "../../../builder";
import {
  Book,
  GetBookRequest,
  GetBookResponse,
  ListBooksResponse,
} from "../proto/proto/catalogue";

export const GetBookRequest$Ref = builder.objectRef<GetBookRequest>(
  "GetBookRequest",
);
builder.objectType(GetBookRequest$Ref, {
  name: "GetBookRequest",
  fields: (t) => ({
    id: t.expose("id", {
      type: "Int",
      nullable: false,
      extensions: { protobufField: { name: "id", typeFullName: "int32" } },
    }),
  }),
  isTypeOf: (source) => {
    return (source as GetBookRequest | { $type: string & {}; }).$type ===
      "book.GetBookRequest";
  },
  extensions: {
    protobufMessage: {
      fullName: "book.GetBookRequest",
      name: "GetBookRequest",
      package: "book",
    },
  },
});

export const GetBookResponse$Ref = builder.objectRef<GetBookResponse>(
  "GetBookResponse",
);
builder.objectType(GetBookResponse$Ref, {
  name: "GetBookResponse",
  fields: (t) => ({
    book: t.expose("book", {
      type: Book$Ref,
      nullable: true,
      extensions: {
        protobufField: { name: "book", typeFullName: "book.Book" },
      },
    }),
  }),
  isTypeOf: (source) => {
    return (source as GetBookResponse | { $type: string & {}; }).$type ===
      "book.GetBookResponse";
  },
  extensions: {
    protobufMessage: {
      fullName: "book.GetBookResponse",
      name: "GetBookResponse",
      package: "book",
    },
  },
});

export const ListBooksResponse$Ref = builder.objectRef<ListBooksResponse>(
  "ListBooksResponse",
);
builder.objectType(ListBooksResponse$Ref, {
  name: "ListBooksResponse",
  fields: (t) => ({
    books: t.expose("books", {
      type: [Book$Ref],
      nullable: { list: true, items: false },
      extensions: {
        protobufField: { name: "books", typeFullName: "book.Book" },
      },
    }),
  }),
  isTypeOf: (source) => {
    return (source as ListBooksResponse | { $type: string & {}; }).$type ===
      "book.ListBooksResponse";
  },
  extensions: {
    protobufMessage: {
      fullName: "book.ListBooksResponse",
      name: "ListBooksResponse",
      package: "book",
    },
  },
});

export const Book$Ref = builder.objectRef<Book>("Book");
builder.objectType(Book$Ref, {
  name: "Book",
  fields: (t) => ({
    id: t.expose("id", {
      type: "Int",
      nullable: false,
      extensions: { protobufField: { name: "id", typeFullName: "int32" } },
    }),
    title: t.expose("title", {
      type: "String",
      nullable: false,
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    }),
    author: t.expose("author", {
      type: "String",
      nullable: false,
      extensions: { protobufField: { name: "author", typeFullName: "string" } },
    }),
    price: t.expose("price", {
      type: "Int",
      nullable: false,
      extensions: { protobufField: { name: "price", typeFullName: "int32" } },
    }),
  }),
  isTypeOf: (source) => {
    return (source as Book | { $type: string & {}; }).$type === "book.Book";
  },
  extensions: {
    protobufMessage: { fullName: "book.Book", name: "Book", package: "book" },
  },
});

export type GetBookRequestInput$Shape = { id: GetBookRequest["id"]; };

export const GetBookRequestInput$Ref: InputObjectRef<
  GetBookRequestInput$Shape
> = builder.inputRef<GetBookRequestInput$Shape>("GetBookRequestInput")
  .implement({
    fields: (t) => ({
      id: t.field({
        type: "Int",
        required: true,
        extensions: { protobufField: { name: "id", typeFullName: "int32" } },
      }),
    }),
    extensions: {
      protobufMessage: {
        fullName: "book.GetBookRequest",
        name: "GetBookRequest",
        package: "book",
      },
    },
  });

export type GetBookResponseInput$Shape = { book?: BookInput$Shape | null; };

export const GetBookResponseInput$Ref: InputObjectRef<
  GetBookResponseInput$Shape
> = builder.inputRef<GetBookResponseInput$Shape>("GetBookResponseInput")
  .implement({
    fields: (t) => ({
      book: t.field({
        type: BookInput$Ref,
        required: false,
        extensions: {
          protobufField: { name: "book", typeFullName: "book.Book" },
        },
      }),
    }),
    extensions: {
      protobufMessage: {
        fullName: "book.GetBookResponse",
        name: "GetBookResponse",
        package: "book",
      },
    },
  });

export type ListBooksResponseInput$Shape = {
  books?: Array<BookInput$Shape> | null;
};

export const ListBooksResponseInput$Ref: InputObjectRef<
  ListBooksResponseInput$Shape
> = builder.inputRef<ListBooksResponseInput$Shape>("ListBooksResponseInput")
  .implement({
    fields: (t) => ({
      books: t.field({
        type: [BookInput$Ref],
        required: { list: false, items: true },
        extensions: {
          protobufField: { name: "books", typeFullName: "book.Book" },
        },
      }),
    }),
    extensions: {
      protobufMessage: {
        fullName: "book.ListBooksResponse",
        name: "ListBooksResponse",
        package: "book",
      },
    },
  });

export type BookInput$Shape = {
  id: Book["id"];
  title: Book["title"];
  author: Book["author"];
  price: Book["price"];
};

export const BookInput$Ref: InputObjectRef<BookInput$Shape> = builder.inputRef<
  BookInput$Shape
>("BookInput").implement({
  fields: (t) => ({
    id: t.field({
      type: "Int",
      required: true,
      extensions: { protobufField: { name: "id", typeFullName: "int32" } },
    }),
    title: t.field({
      type: "String",
      required: true,
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    }),
    author: t.field({
      type: "String",
      required: true,
      extensions: { protobufField: { name: "author", typeFullName: "string" } },
    }),
    price: t.field({
      type: "Int",
      required: true,
      extensions: { protobufField: { name: "price", typeFullName: "int32" } },
    }),
  }),
  extensions: {
    protobufMessage: { fullName: "book.Book", name: "Book", package: "book" },
  },
});
